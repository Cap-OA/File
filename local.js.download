//Functions specific to the LOCAL frame
//Requires functions found in genfunc.js

var winDone=0;
var intervalID;

function bVer() {

    var agt=navigator.userAgent.toLowerCase();

    // *** BROWSER VERSION ***
    // Note: On IE5, these return 4, so use is_ie5up to detect IE5.
    var is_major = parseInt(navigator.appVersion);
    var is_minor = parseFloat(navigator.appVersion);

    // Note: Opera and WebTV spoof Navigator.  We do strict client detection.
    // If you want to allow spoofing, take out the tests for opera and webtv.
    var is_nav  = ((agt.indexOf('mozilla')!=-1) && (agt.indexOf('spoofer')==-1)
                   && (agt.indexOf('compatible') == -1) && (agt.indexOf('opera')==-1)
                   && (agt.indexOf('webtv')==-1) && (agt.indexOf('hotjava')==-1));
    is_nav2 = (is_nav && (is_major == 2));
    is_nav3 = (is_nav && (is_major == 3));
    is_nav4 = (is_nav && (is_major == 4));
    is_nav4up = (is_nav && (is_major >= 4));
    is_nav4down = (is_nav && (is_major <= 4));
    is_navonly      = (is_nav && ((agt.indexOf(";nav") != -1) ||
                                  (agt.indexOf("; nav") != -1)) );
    is_nav6 = (is_nav && (is_major == 5));
    is_nav6up = (is_nav && (is_major >= 5));
    is_gecko = (agt.indexOf('gecko') != -1);


    is_ie     = ((agt.indexOf("msie") != -1) && (agt.indexOf("opera") == -1));
    is_ie3    = (is_ie && (is_major < 4));
    is_ie4    = (is_ie && (is_major == 4) && (agt.indexOf("msie 4")!=-1) );
    is_ie4up  = (is_ie && (is_major >= 4));
    is_ie5    = (is_ie && (is_major == 4) && (agt.indexOf("msie 5.0")!=-1) );
    is_ie5_5  = (is_ie && (is_major == 4) && (agt.indexOf("msie 5.5") !=-1));
    is_ie5up  = (is_ie && !is_ie3 && !is_ie4);
    is_ie5_5up =(is_ie && !is_ie3 && !is_ie4 && !is_ie5);
    is_ie6    = (is_ie && (is_major == 4) && (agt.indexOf("msie 6.")!=-1) );
    is_ie6up  = (is_ie && !is_ie3 && !is_ie4 && !is_ie5 && !is_ie5_5);
}

function findNextNodeWithHit() {
    var LC;
    var NN;


    LC = null;
    NN = window.parent.currentNode;
    do {
        // First visit and have a hit, and not current node
        if (LC == null && NN.mycount > 0 && NN != window.parent.currentNode) {
            return NN;
        }
        // First visit
        if (LC == null) {
            // With Children
            if (NN.nChildren > 0) {
                LC = null;
                NN = NN.children[0];
            }
            else {
                LC = NN;
                NN = NN.parentObj;
            }
        }
        else {
            for (i = 0; i < NN.nChildren; i++) {
                if (NN.children[i] == LC)
                    break;
            }
            i++;
            if (i < NN.nChildren) {
                LC = null;
                NN = NN.children[i];
            }
            else {
                LC = NN;
                NN = NN.parentObj;
            }
        }
    } while (NN != null);
    return NN;
}

function findPrevNodeWithHit() {
    var LC;
    var NN;
    var i;


    LC = null;
    NN = window.parent.currentNode;
    do {
        // First visit
        if (LC == null) {
            // With Children
            if (NN != window.parent.currentNode && NN.nChildren > 0) {
                LC = null;
                NN = NN.children[NN.nChildren - 1];
            }
            else {
                if (NN.mycount > 0 && NN != window.parent.currentNode) {
                    return NN;
                }
                LC = NN;
                NN = NN.parentObj;
            }
        }
        else {
            for (i = NN.nChildren - 1; i >= 0; i--) {
                if (NN.children[i] == LC)
                    break;
            }
            i--;
            if (i >= 0) {
                LC = null;
                NN = NN.children[i];
            }
            else {
                if (NN.mycount > 0 && NN != window.parent.currentNode) {
                    return NN;
                }
                LC = NN;
                NN = NN.parentObj;
            }
        }
    } while (NN != null);
    return NN;
}

function nexthit() {
    var newhref;
    var curhref;    
    var curhreflen;
    var nextNode;
    var currAnchor;
    
    bVer();

    if (window.parent.currentNode == null)
        if (window.parent.NAV.foldersTree) {
            window.parent.currentNode = window.parent.NAV.foldersTree;
        }
        else {
            window.parent.currentNode = window.parent.Node.xref[1];
        }

    if (window.parent.currentNode != null) {
        var hPage = window.parent.currentNode;
        while ( hPage.hreference.indexOf('#') != -1 ) { hPage = hPage.parentObj; }
        if (hPage.mycount > window.parent.currentHit)
        // Next hit on page
        {
            if (is_ie5up || is_nav6up) {
                currAnchor = 'hit' + window.parent.currentHit;
                if (window.parent.TEXT.document.getElementsByName(currAnchor)[0]) { //Set both styles to avoid overset text in IE
                    window.parent.TEXT.document.getElementsByName(currAnchor)[0].className = "mmhit";
                    if (window.parent.TEXT.document.getElementsByName('Layer1')[0])
                        window.parent.TEXT.document.getElementsByName('Layer1')[0].className = "TEXT";
                }
            }
            window.parent.currentHit += 1;
            if (window.parent.NAV.foldersTree) {
                curhref = hPage.hreference;
            }
            else {
                curhref = hPage.href;
            }
            curhreflen = curhref.indexOf('#');
            if (curhreflen == -1)
                newhref = curhref;
            else
                newhref = curhref.substring(0, curhreflen);
            window.parent.TEXT.location = newhref + '#hit' + window.parent.currentHit;
            if (is_ie5up || is_nav6up) {
                currAnchor = 'hit' + window.parent.currentHit;
                if (window.parent.TEXT.document.getElementsByName(currAnchor)[0]) { //Set both styles to avoid overset text in IE
                    window.parent.TEXT.document.getElementsByName(currAnchor)[0].className="mmhitC";
                    if (window.parent.TEXT.document.getElementsByName('Layer1')[0])
                        window.parent.TEXT.document.getElementsByName('Layer1')[0].className = "TEXT";
                }
            }
            return;
        }
        if (window.parent.NAV.foldersTree) {
            nextNode = findNextNodeWithHit();
        }
        else {
            nextNode = hPage.nextNode;
        }
        if (nextNode != null) {
            if (window.parent.NAV.foldersTree) {
                newhref = nextNode.hreference;
            }
            else {
                newhref = window.parent.Node.xref[nextNode].href;
            }
            if (newhref.indexOf('#') == -1) { newhref = newhref + '#hit1'; }

            window.parent.currentHit = 1;
            if (window.parent.NAV.foldersTree) {
                window.parent.currentNode = nextNode;
            }
            else {
                window.parent.Node.xref[nextNode];
            }
            window.parent.TEXT.location=newhref;
        }
        else {
            alert("No more hits");
        }
        return; 
    }
}

function prevhit() {
    var newhref;
    var prevNode;
    var currAnchor;

    bVer();

    if (window.parent.currentNode == null)
        if (window.parent.NAV.foldersTree) {
            window.parent.currentNode = window.parent.NAV.foldersTree;
        }
        else {
            window.parent.currentNode = window.parent.Node.xref[1];
        }
    if (window.parent.currentNode != null) {
        if (window.parent.currentHit > 1) {
            if (is_ie5up || is_nav6up) {
                currAnchor = 'hit' + window.parent.currentHit;
                if (window.parent.TEXT.document.getElementsByName(currAnchor)[0]) { //Set both styles to avoid overset text in IE
                    window.parent.TEXT.document.getElementsByName(currAnchor)[0].className="mmhit";
                    if (window.parent.TEXT.document.getElementsByName('Layer1')[0])
                        window.parent.TEXT.document.getElementsByName('Layer1')[0].className = "TEXT";
                }
            }
            window.parent.currentHit -= 1;
            if (window.parent.NAV.foldersTree) {
                curhref = window.parent.currentNode.hreference;
            }
            else {
                curhref = window.parent.currentNode.href;
            }
            curhreflen = curhref.indexOf('#');
            if (curhreflen == -1)
                newhref = curhref;
            else
                newhref = curhref.substring(0, curhreflen);
            window.parent.TEXT.location = newhref + '#hit' + window.parent.currentHit;
            if (is_ie5up || is_nav6up) {
                currAnchor = 'hit' + window.parent.currentHit;
                if (window.parent.TEXT.document.getElementsByName(currAnchor)[0]) { //Set both styles to avoid overset text in IE
                    window.parent.TEXT.document.getElementsByName(currAnchor)[0].className="mmhitC";
                    if (window.parent.TEXT.document.getElementsByName('Layer1')[0])
                        window.parent.TEXT.document.getElementsByName('Layer1')[0].className = "TEXT";
                }
            }
            return;
        }
        if (window.parent.NAV.foldersTree) {
            prevNode = findPrevNodeWithHit();
        }
        else {
            prevNode = window.parent.currentNode.prevNode;
        }
        if (prevNode != null) {
            if (window.parent.NAV.foldersTree) {
                newhref = prevNode.hreference;
            }
            else {
                newhref = window.parent.Node.xref[prevNode].href;
            }
            curhref = newhref;
            curhreflen = curhref.indexOf('#');
            if (curhreflen == -1)
                newhref = curhref;
            else
                newhref = curhref.substring(0, curhreflen);
            if (newhref.indexOf('#') == -1) {
                if (window.parent.NAV.foldersTree) {
                    newhref = newhref + '#hit' + prevNode.mycount;
                }
                else {
                    newhref = newhref + '#hit' + window.parent.Node.xref[prevNode].mycount;
                }
            }
            if (window.parent.NAV.foldersTree) {
                window.parent.currentHit = prevNode.mycount;
                window.parent.currentNode = prevNode;
            }
            else {
                window.parent.currentHit = window.parent.Node.xref[prevNode].mycount;
                window.parent.currentNode = window.parent.Node.xref[prevNode];
            }
            window.parent.TEXT.location=newhref;
        }
        else {
            alert("No more hits");
        }
    }
}

function doMyInit() {
    if (document.all != null && document.all("Feedback",0) != null) {
        // If this is not an HTTP page, disable feedback
        if (document.location.protocol != "http:" && document.location.protocol != "https:" ) {
            document.all("Feedback",0).innerHTML = "";
            document.all("Feedback",0).onclick = null;
        }
    }
    var book = getBook();
    if (document.search_form) {
        document.search_form.bkq.value = book;
        if (window.parent.frames[2]) {
            if (window.parent.frames[2].setquery)
                window.parent.frames[2].setquery();
        }
    }
    if (document.local_form)
        updateJList(book);
}

function doLocalXMLInit() {
    MM_preloadImages('images/srch_ov.gif','images/back_ov.gif','images/fwd_ov.gif','images/prnt_ov.gif','images/coll_ov.gif')
// This is only used by IE4 and up when supporting XML table of contents.
    if (document.all("Feedback",0) != null) {
        // Let's see if the navigation bar has decided about using feedback.
        if (window.parent.useFeedback != null) {
            useFeedback = window.parent.useFeedback;
            displayFeedback(useFeedback);
        }
    }
}

function displayFeedback(useFeedback) {
    if (useFeedback && (document.location.protocol == "http:" || document.location.protocol == "https:" )) {
        Feedback.className = "localfeedback";
        Nofeedback.className = "hidden";
    }
    else {
        Feedback.className = "hidden";
        Nofeedback.className = "nolocalfeedback";
    }
}

function MM_swapImgRestore() { //v3.0
    var i,x,a=document.MM_sr; for (i=0;a&&i<a.length&&(x=a[i])&&x.oSrc;i++) x.src=x.oSrc;
}

function MM_preloadImages() { //v3.0
    var d=document; if (d.images) {
        if (!d.MM_p) d.MM_p=new Array();
        var i,j=d.MM_p.length,a=MM_preloadImages.arguments; for (i=0; i<a.length; i++)
            if (a[i].indexOf("#")!=0) {
                d.MM_p[j]=new Image; d.MM_p[j++].src=a[i];
            }
    }
}
function MM_findObj(n, d) { //v4.0
    var p,i,x;  if (!d) d=document;if ((p=n.indexOf("?"))>0&&parent.frames.length) {
        d=parent.frames[n.substring(p+1)].document; n=n.substring(0,p);
    }
    if (!(x=d[n])&&d.all) x=d.all[n];for (i=0;!x&&i<d.forms.length;i++) x=d.forms[i][n];
    for (i=0;!x&&d.layers&&i<d.layers.length;i++) x=MM_findObj(n,d.layers[i].document);
    if (!x && document.getElementById) x=document.getElementById(n);return x;
}

function MM_swapImage() { //v3.0
    var i,j=0,x,a=MM_swapImage.arguments; document.MM_sr=new Array; for (i=0;i<(a.length-2);i+=3)
        if ((x=MM_findObj(a[i]))!=null) {
            document.MM_sr[j++]=x; if (!x.oSrc) x.oSrc=x.src;x.src=a[i+2];
        }
}

function MM_jumpMenu(targ,selObj,restore) { //v3.0

    eval(targ+".location='"+selObj.options[selObj.selectedIndex].value+"'");
    if (restore) selObj.selectedIndex=0;
}

function updateJList(book) {
    // Define the values of the jump list

    //var book = getBook();
    
    if (book != "") {
        bookNames = new Array(17);
        bookCodes = new Array(17);
        bookLocations = new Array(17);
        bookNames[0] = "Abaqus 2016 Documentation Collection";
        bookCodes[0] = 'col';
        bookLocations[0] = '../../index.html';
        bookNames[1] = "Abaqus/CAE User's Guide";
        bookCodes[1] = 'usi';
        bookLocations[1] = '../usi/default.htm';
        bookNames[2] = "Abaqus Analysis User's Guide";
        bookCodes[2] = 'usb';
        bookLocations[2] = '../usb/default.htm';
        bookNames[3] = "Abaqus Example Problems Guide";
        bookCodes[3] = 'exa';
        bookLocations[3] = '../exa/default.htm';
        bookNames[4] = "Abaqus Benchmarks Guide";
        bookCodes[4] = 'bmk';
        bookLocations[4] = '../bmk/default.htm';
        bookNames[5] = "Getting Started with Abaqus/CAE";
        bookCodes[5] = 'gsa';
        bookLocations[5] = '../gsa/default.htm';
        bookNames[6] = "Using Abaqus Online Documentation";
        bookCodes[6] = 'hhp';
        bookLocations[6] = '../hhp/default.htm';
        bookNames[7] = "Abaqus Installation and Licensing Guide";
        bookCodes[7] = 'sgb';
        bookLocations[7] = '../sgb/default.htm';
        bookNames[8] = "Abaqus Keywords Reference Guide";
        bookCodes[8] = 'key';
        bookLocations[8] = '../key/default.htm';
        bookNames[9] = "Abaqus Theory Guide";
        bookCodes[9] = 'stm';
        bookLocations[9] = '../stm/default.htm';
        bookNames[10] = "Abaqus Verification Guide";
        bookCodes[10] = 'ver';
        bookLocations[10] = '../ver/default.htm';
        bookNames[11] = "Abaqus User Subroutines Reference Guide";
        bookCodes[11] = 'sub';
        bookLocations[11] = '../sub/default.htm';
	bookNames[12] = "Abaqus Glossary";
	bookCodes[12] = 'gls';
	bookLocations[12] = '../gls/default.htm';
        bookNames[13] = "Abaqus Scripting User's Guide";
        bookCodes[13] = 'cmd';
        bookLocations[13] = '../cmd/default.htm';
        bookNames[14] = "Abaqus Scripting Reference Guide";
        bookCodes[14] = 'ker';
        bookLocations[14] = '../ker/default.htm';
        bookNames[15] = "Abaqus GUI Toolkit User's Guide";
        bookCodes[15] = 'cus';
        bookLocations[15] = '../cus/default.htm';
        bookNames[16] = "Abaqus GUI Toolkit Reference Guide";
        bookCodes[16] = 'gui';
        bookLocations[16] = '../gui/default.htm';
        bookNames[17] = "Abaqus Release Notes";
        bookCodes[17] = 'rnb';
        bookLocations[17] = '../rnb/default.htm';
        var JList_length = bookNames.length;

        var currentPosition = 0;
        while (currentPosition < JList_length) { // Create jump list
            document.local_form.collection.options[currentPosition] = new Option(eval('bookNames[currentPosition]'), eval('bookLocations[currentPosition]'),0,0);
            if (book == bookCodes[currentPosition]) {
                document.local_form.collection.options[currentPosition].selected = true;
            }
            ++currentPosition;
        }
    }
}

function pTXT() {
    parent.frames[3].focus();
    if (window.print) {
        parent.frames[3].print();       
    }
    return;
}


